package postgres

import (
	"database/sql"
	"fmt"
	"log"
	"os"
	"strings"
	"testing"

	"github.com/DATA-DOG/go-txdb"
	"github.com/bokwoon95/go-structured-query/sqgen"
	"github.com/joho/godotenv"
	_ "github.com/lib/pq"
	"github.com/matryer/is"
)

func TestMain(t *testing.M) {
	err := godotenv.Load("../../.env")
	if err != nil {
		log.Fatal("Error loading .env file")
	}
	POSTGRES_USER := os.Getenv("POSTGRES_USER")
	POSTGRES_PASSWORD := os.Getenv("POSTGRES_PASSWORD")
	POSTGRES_PORT := os.Getenv("POSTGRES_PORT")
	POSTGRES_NAME := os.Getenv("POSTGRES_NAME")
	txdb.Register(
		"txdb",
		"postgres",
		fmt.Sprintf(
			"postgres://%s:%s@localhost:%s/%s?sslmode=disable",
			POSTGRES_USER,
			POSTGRES_PASSWORD,
			POSTGRES_PORT,
			POSTGRES_NAME,
		),
	)

	os.Exit(t.Run())
}

func TestBuildTables(t *testing.T) {
	if testing.Short() {
		return
	}

	db, err := sql.Open("txdb", "BuildTables")

	is := is.New(t)
	is.NoErr(err)

	config := Config{
		DB:      db,
		Package: "tables",
		Schemas: []string{"public"},
		Exclude: nil,
		Logger:  &sqgen.MockLogger{},
	}

	var writer strings.Builder
	numTables, err := BuildTables(config, &writer)
	is.NoErr(err)
	is.Equal(numTables, 27)

	out := writer.String()
	is.Equal(out, expectedTables)
}

func TestBuildFunctions(t *testing.T) {
	if testing.Short() {
		return
	}

	db, err := sql.Open("txdb", "BuildFunctions")

	is := is.New(t)
	is.NoErr(err)

	config := Config{
		DB:      db,
		Package: "tables",
		Schemas: []string{"public"},
		Exclude: nil,
		Logger:  &sqgen.MockLogger{},
	}

	var writer strings.Builder
	numFunctions, err := BuildFunctions(config, &writer)
	is.NoErr(err)
	is.Equal(numFunctions, 34)

	out := writer.String()
	is.Equal(out, expectedFunctions)
}

const expectedTables = `// Code generated by 'sqgen-postgres tables'; DO NOT EDIT.
package tables

import (
	sq "github.com/bokwoon95/go-structured-query/postgres"
)

// TABLE_APPLICATIONS references the public.applications table.
type TABLE_APPLICATIONS struct {
	*sq.TableInfo
	APPLICATION_DATA     sq.JSONField
	APPLICATION_FORM_ID  sq.NumberField
	APPLICATION_ID       sq.NumberField
	COHORT               sq.StringField
	CREATED_AT           sq.TimeField
	CREATOR_USER_ROLE_ID sq.NumberField
	DELETED_AT           sq.TimeField
	MAGICSTRING          sq.StringField
	PROJECT_IDEA         sq.StringField
	PROJECT_LEVEL        sq.StringField
	STATUS               sq.StringField
	SUBMITTED            sq.BooleanField
	TEAM_ID              sq.NumberField
	TEAM_NAME            sq.StringField
	UPDATED_AT           sq.TimeField
}

// APPLICATIONS creates an instance of the public.applications table.
func APPLICATIONS() TABLE_APPLICATIONS {
	tbl := TABLE_APPLICATIONS{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "applications",
	}}
	tbl.APPLICATION_DATA = sq.NewJSONField("application_data", tbl.TableInfo)
	tbl.APPLICATION_FORM_ID = sq.NewNumberField("application_form_id", tbl.TableInfo)
	tbl.APPLICATION_ID = sq.NewNumberField("application_id", tbl.TableInfo)
	tbl.COHORT = sq.NewStringField("cohort", tbl.TableInfo)
	tbl.CREATED_AT = sq.NewTimeField("created_at", tbl.TableInfo)
	tbl.CREATOR_USER_ROLE_ID = sq.NewNumberField("creator_user_role_id", tbl.TableInfo)
	tbl.DELETED_AT = sq.NewTimeField("deleted_at", tbl.TableInfo)
	tbl.MAGICSTRING = sq.NewStringField("magicstring", tbl.TableInfo)
	tbl.PROJECT_IDEA = sq.NewStringField("project_idea", tbl.TableInfo)
	tbl.PROJECT_LEVEL = sq.NewStringField("project_level", tbl.TableInfo)
	tbl.STATUS = sq.NewStringField("status", tbl.TableInfo)
	tbl.SUBMITTED = sq.NewBooleanField("submitted", tbl.TableInfo)
	tbl.TEAM_ID = sq.NewNumberField("team_id", tbl.TableInfo)
	tbl.TEAM_NAME = sq.NewStringField("team_name", tbl.TableInfo)
	tbl.UPDATED_AT = sq.NewTimeField("updated_at", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_APPLICATIONS) As(alias string) TABLE_APPLICATIONS {
	tbl.TableInfo.Alias = alias
	return tbl
}

// TABLE_APPLICATIONS_STATUS_ENUM references the public.applications_status_enum table.
type TABLE_APPLICATIONS_STATUS_ENUM struct {
	*sq.TableInfo
	STATUS sq.StringField
}

// APPLICATIONS_STATUS_ENUM creates an instance of the public.applications_status_enum table.
func APPLICATIONS_STATUS_ENUM() TABLE_APPLICATIONS_STATUS_ENUM {
	tbl := TABLE_APPLICATIONS_STATUS_ENUM{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "applications_status_enum",
	}}
	tbl.STATUS = sq.NewStringField("status", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_APPLICATIONS_STATUS_ENUM) As(alias string) TABLE_APPLICATIONS_STATUS_ENUM {
	tbl.TableInfo.Alias = alias
	return tbl
}

// TABLE_COHORT_ENUM references the public.cohort_enum table.
type TABLE_COHORT_ENUM struct {
	*sq.TableInfo
	COHORT          sq.StringField
	INSERTION_ORDER sq.NumberField
}

// COHORT_ENUM creates an instance of the public.cohort_enum table.
func COHORT_ENUM() TABLE_COHORT_ENUM {
	tbl := TABLE_COHORT_ENUM{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "cohort_enum",
	}}
	tbl.COHORT = sq.NewStringField("cohort", tbl.TableInfo)
	tbl.INSERTION_ORDER = sq.NewNumberField("insertion_order", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_COHORT_ENUM) As(alias string) TABLE_COHORT_ENUM {
	tbl.TableInfo.Alias = alias
	return tbl
}

// TABLE_FEEDBACK_ON_TEAMS references the public.feedback_on_teams table.
type TABLE_FEEDBACK_ON_TEAMS struct {
	*sq.TableInfo
	CREATED_AT          sq.TimeField
	DELETED_AT          sq.TimeField
	EVALUATEE_TEAM_ID   sq.NumberField
	EVALUATOR_TEAM_ID   sq.NumberField
	FEEDBACK_DATA       sq.JSONField
	FEEDBACK_FORM_ID    sq.NumberField
	FEEDBACK_ID_ON_TEAM sq.NumberField
	OVERRIDE_OPEN       sq.BooleanField
	SUBMITTED           sq.BooleanField
	UPDATED_AT          sq.TimeField
}

// FEEDBACK_ON_TEAMS creates an instance of the public.feedback_on_teams table.
func FEEDBACK_ON_TEAMS() TABLE_FEEDBACK_ON_TEAMS {
	tbl := TABLE_FEEDBACK_ON_TEAMS{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "feedback_on_teams",
	}}
	tbl.CREATED_AT = sq.NewTimeField("created_at", tbl.TableInfo)
	tbl.DELETED_AT = sq.NewTimeField("deleted_at", tbl.TableInfo)
	tbl.EVALUATEE_TEAM_ID = sq.NewNumberField("evaluatee_team_id", tbl.TableInfo)
	tbl.EVALUATOR_TEAM_ID = sq.NewNumberField("evaluator_team_id", tbl.TableInfo)
	tbl.FEEDBACK_DATA = sq.NewJSONField("feedback_data", tbl.TableInfo)
	tbl.FEEDBACK_FORM_ID = sq.NewNumberField("feedback_form_id", tbl.TableInfo)
	tbl.FEEDBACK_ID_ON_TEAM = sq.NewNumberField("feedback_id_on_team", tbl.TableInfo)
	tbl.OVERRIDE_OPEN = sq.NewBooleanField("override_open", tbl.TableInfo)
	tbl.SUBMITTED = sq.NewBooleanField("submitted", tbl.TableInfo)
	tbl.UPDATED_AT = sq.NewTimeField("updated_at", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_FEEDBACK_ON_TEAMS) As(alias string) TABLE_FEEDBACK_ON_TEAMS {
	tbl.TableInfo.Alias = alias
	return tbl
}

// TABLE_FEEDBACK_ON_USERS references the public.feedback_on_users table.
type TABLE_FEEDBACK_ON_USERS struct {
	*sq.TableInfo
	CREATED_AT             sq.TimeField
	DELETED_AT             sq.TimeField
	EVALUATEE_USER_ROLE_ID sq.NumberField
	EVALUATOR_TEAM_ID      sq.NumberField
	FEEDBACK_DATA          sq.JSONField
	FEEDBACK_FORM_ID       sq.NumberField
	FEEDBACK_ID_ON_USER    sq.NumberField
	OVERRIDE_OPEN          sq.BooleanField
	SUBMITTED              sq.BooleanField
	UPDATED_AT             sq.TimeField
}

// FEEDBACK_ON_USERS creates an instance of the public.feedback_on_users table.
func FEEDBACK_ON_USERS() TABLE_FEEDBACK_ON_USERS {
	tbl := TABLE_FEEDBACK_ON_USERS{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "feedback_on_users",
	}}
	tbl.CREATED_AT = sq.NewTimeField("created_at", tbl.TableInfo)
	tbl.DELETED_AT = sq.NewTimeField("deleted_at", tbl.TableInfo)
	tbl.EVALUATEE_USER_ROLE_ID = sq.NewNumberField("evaluatee_user_role_id", tbl.TableInfo)
	tbl.EVALUATOR_TEAM_ID = sq.NewNumberField("evaluator_team_id", tbl.TableInfo)
	tbl.FEEDBACK_DATA = sq.NewJSONField("feedback_data", tbl.TableInfo)
	tbl.FEEDBACK_FORM_ID = sq.NewNumberField("feedback_form_id", tbl.TableInfo)
	tbl.FEEDBACK_ID_ON_USER = sq.NewNumberField("feedback_id_on_user", tbl.TableInfo)
	tbl.OVERRIDE_OPEN = sq.NewBooleanField("override_open", tbl.TableInfo)
	tbl.SUBMITTED = sq.NewBooleanField("submitted", tbl.TableInfo)
	tbl.UPDATED_AT = sq.NewTimeField("updated_at", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_FEEDBACK_ON_USERS) As(alias string) TABLE_FEEDBACK_ON_USERS {
	tbl.TableInfo.Alias = alias
	return tbl
}

// TABLE_FORMS references the public.forms table.
type TABLE_FORMS struct {
	*sq.TableInfo
	CREATED_AT sq.TimeField
	DELETED_AT sq.TimeField
	FORM_ID    sq.NumberField
	NAME       sq.StringField
	PERIOD_ID  sq.NumberField
	QUESTIONS  sq.JSONField
	SUBSECTION sq.StringField
	UPDATED_AT sq.TimeField
}

// FORMS creates an instance of the public.forms table.
func FORMS() TABLE_FORMS {
	tbl := TABLE_FORMS{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "forms",
	}}
	tbl.CREATED_AT = sq.NewTimeField("created_at", tbl.TableInfo)
	tbl.DELETED_AT = sq.NewTimeField("deleted_at", tbl.TableInfo)
	tbl.FORM_ID = sq.NewNumberField("form_id", tbl.TableInfo)
	tbl.NAME = sq.NewStringField("name", tbl.TableInfo)
	tbl.PERIOD_ID = sq.NewNumberField("period_id", tbl.TableInfo)
	tbl.QUESTIONS = sq.NewJSONField("questions", tbl.TableInfo)
	tbl.SUBSECTION = sq.NewStringField("subsection", tbl.TableInfo)
	tbl.UPDATED_AT = sq.NewTimeField("updated_at", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_FORMS) As(alias string) TABLE_FORMS {
	tbl.TableInfo.Alias = alias
	return tbl
}

// TABLE_FORMS_AUTHORIZED_ROLES references the public.forms_authorized_roles table.
type TABLE_FORMS_AUTHORIZED_ROLES struct {
	*sq.TableInfo
	FORM_ID sq.NumberField
	ROLE    sq.StringField
}

// FORMS_AUTHORIZED_ROLES creates an instance of the public.forms_authorized_roles table.
func FORMS_AUTHORIZED_ROLES() TABLE_FORMS_AUTHORIZED_ROLES {
	tbl := TABLE_FORMS_AUTHORIZED_ROLES{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "forms_authorized_roles",
	}}
	tbl.FORM_ID = sq.NewNumberField("form_id", tbl.TableInfo)
	tbl.ROLE = sq.NewStringField("role", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_FORMS_AUTHORIZED_ROLES) As(alias string) TABLE_FORMS_AUTHORIZED_ROLES {
	tbl.TableInfo.Alias = alias
	return tbl
}

// TABLE_MEDIA references the public.media table.
type TABLE_MEDIA struct {
	*sq.TableInfo
	CREATED_AT  sq.TimeField
	DATA        sq.BinaryField
	DELETED_AT  sq.TimeField
	DESCRIPTION sq.StringField
	NAME        sq.StringField
	TYPE        sq.StringField
	UPDATED_AT  sq.TimeField
	UUID        sq.UUIDField
}

// MEDIA creates an instance of the public.media table.
func MEDIA() TABLE_MEDIA {
	tbl := TABLE_MEDIA{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "media",
	}}
	tbl.CREATED_AT = sq.NewTimeField("created_at", tbl.TableInfo)
	tbl.DATA = sq.NewBinaryField("data", tbl.TableInfo)
	tbl.DELETED_AT = sq.NewTimeField("deleted_at", tbl.TableInfo)
	tbl.DESCRIPTION = sq.NewStringField("description", tbl.TableInfo)
	tbl.NAME = sq.NewStringField("name", tbl.TableInfo)
	tbl.TYPE = sq.NewStringField("type", tbl.TableInfo)
	tbl.UPDATED_AT = sq.NewTimeField("updated_at", tbl.TableInfo)
	tbl.UUID = sq.NewUUIDField("uuid", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_MEDIA) As(alias string) TABLE_MEDIA {
	tbl.TableInfo.Alias = alias
	return tbl
}

// TABLE_MILESTONE_ENUM references the public.milestone_enum table.
type TABLE_MILESTONE_ENUM struct {
	*sq.TableInfo
	MILESTONE sq.StringField
}

// MILESTONE_ENUM creates an instance of the public.milestone_enum table.
func MILESTONE_ENUM() TABLE_MILESTONE_ENUM {
	tbl := TABLE_MILESTONE_ENUM{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "milestone_enum",
	}}
	tbl.MILESTONE = sq.NewStringField("milestone", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_MILESTONE_ENUM) As(alias string) TABLE_MILESTONE_ENUM {
	tbl.TableInfo.Alias = alias
	return tbl
}

// TABLE_MIME_TYPE_ENUM references the public.mime_type_enum table.
type TABLE_MIME_TYPE_ENUM struct {
	*sq.TableInfo
	TYPE sq.StringField
}

// MIME_TYPE_ENUM creates an instance of the public.mime_type_enum table.
func MIME_TYPE_ENUM() TABLE_MIME_TYPE_ENUM {
	tbl := TABLE_MIME_TYPE_ENUM{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "mime_type_enum",
	}}
	tbl.TYPE = sq.NewStringField("type", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_MIME_TYPE_ENUM) As(alias string) TABLE_MIME_TYPE_ENUM {
	tbl.TableInfo.Alias = alias
	return tbl
}

// TABLE_PERIODS references the public.periods table.
type TABLE_PERIODS struct {
	*sq.TableInfo
	COHORT     sq.StringField
	CREATED_AT sq.TimeField
	DELETED_AT sq.TimeField
	END_AT     sq.TimeField
	MILESTONE  sq.StringField
	PERIOD_ID  sq.NumberField
	STAGE      sq.StringField
	START_AT   sq.TimeField
	UPDATED_AT sq.TimeField
}

// PERIODS creates an instance of the public.periods table.
func PERIODS() TABLE_PERIODS {
	tbl := TABLE_PERIODS{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "periods",
	}}
	tbl.COHORT = sq.NewStringField("cohort", tbl.TableInfo)
	tbl.CREATED_AT = sq.NewTimeField("created_at", tbl.TableInfo)
	tbl.DELETED_AT = sq.NewTimeField("deleted_at", tbl.TableInfo)
	tbl.END_AT = sq.NewTimeField("end_at", tbl.TableInfo)
	tbl.MILESTONE = sq.NewStringField("milestone", tbl.TableInfo)
	tbl.PERIOD_ID = sq.NewNumberField("period_id", tbl.TableInfo)
	tbl.STAGE = sq.NewStringField("stage", tbl.TableInfo)
	tbl.START_AT = sq.NewTimeField("start_at", tbl.TableInfo)
	tbl.UPDATED_AT = sq.NewTimeField("updated_at", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_PERIODS) As(alias string) TABLE_PERIODS {
	tbl.TableInfo.Alias = alias
	return tbl
}

// TABLE_PROJECT_CATEGORY_ENUM references the public.project_category_enum table.
type TABLE_PROJECT_CATEGORY_ENUM struct {
	*sq.TableInfo
	PROJECT_CATEGORY sq.StringField
}

// PROJECT_CATEGORY_ENUM creates an instance of the public.project_category_enum table.
func PROJECT_CATEGORY_ENUM() TABLE_PROJECT_CATEGORY_ENUM {
	tbl := TABLE_PROJECT_CATEGORY_ENUM{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "project_category_enum",
	}}
	tbl.PROJECT_CATEGORY = sq.NewStringField("project_category", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_PROJECT_CATEGORY_ENUM) As(alias string) TABLE_PROJECT_CATEGORY_ENUM {
	tbl.TableInfo.Alias = alias
	return tbl
}

// TABLE_PROJECT_LEVEL_ENUM references the public.project_level_enum table.
type TABLE_PROJECT_LEVEL_ENUM struct {
	*sq.TableInfo
	PROJECT_LEVEL sq.StringField
}

// PROJECT_LEVEL_ENUM creates an instance of the public.project_level_enum table.
func PROJECT_LEVEL_ENUM() TABLE_PROJECT_LEVEL_ENUM {
	tbl := TABLE_PROJECT_LEVEL_ENUM{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "project_level_enum",
	}}
	tbl.PROJECT_LEVEL = sq.NewStringField("project_level", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_PROJECT_LEVEL_ENUM) As(alias string) TABLE_PROJECT_LEVEL_ENUM {
	tbl.TableInfo.Alias = alias
	return tbl
}

// TABLE_ROLE_ENUM references the public.role_enum table.
type TABLE_ROLE_ENUM struct {
	*sq.TableInfo
	ROLE sq.StringField
}

// ROLE_ENUM creates an instance of the public.role_enum table.
func ROLE_ENUM() TABLE_ROLE_ENUM {
	tbl := TABLE_ROLE_ENUM{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "role_enum",
	}}
	tbl.ROLE = sq.NewStringField("role", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_ROLE_ENUM) As(alias string) TABLE_ROLE_ENUM {
	tbl.TableInfo.Alias = alias
	return tbl
}

// TABLE_SESSIONS references the public.sessions table.
type TABLE_SESSIONS struct {
	*sq.TableInfo
	CREATED_AT sq.TimeField
	HASH       sq.StringField
	USER_ID    sq.NumberField
}

// SESSIONS creates an instance of the public.sessions table.
func SESSIONS() TABLE_SESSIONS {
	tbl := TABLE_SESSIONS{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "sessions",
	}}
	tbl.CREATED_AT = sq.NewTimeField("created_at", tbl.TableInfo)
	tbl.HASH = sq.NewStringField("hash", tbl.TableInfo)
	tbl.USER_ID = sq.NewNumberField("user_id", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_SESSIONS) As(alias string) TABLE_SESSIONS {
	tbl.TableInfo.Alias = alias
	return tbl
}

// TABLE_STAGE_ENUM references the public.stage_enum table.
type TABLE_STAGE_ENUM struct {
	*sq.TableInfo
	STAGE sq.StringField
}

// STAGE_ENUM creates an instance of the public.stage_enum table.
func STAGE_ENUM() TABLE_STAGE_ENUM {
	tbl := TABLE_STAGE_ENUM{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "stage_enum",
	}}
	tbl.STAGE = sq.NewStringField("stage", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_STAGE_ENUM) As(alias string) TABLE_STAGE_ENUM {
	tbl.TableInfo.Alias = alias
	return tbl
}

// TABLE_SUBMISSIONS references the public.submissions table.
type TABLE_SUBMISSIONS struct {
	*sq.TableInfo
	CREATED_AT         sq.TimeField
	DELETED_AT         sq.TimeField
	OVERRIDE_OPEN      sq.BooleanField
	POSTER             sq.StringField
	README             sq.StringField
	SUBMISSION_DATA    sq.JSONField
	SUBMISSION_FORM_ID sq.NumberField
	SUBMISSION_ID      sq.NumberField
	SUBMITTED          sq.BooleanField
	TEAM_ID            sq.NumberField
	UPDATED_AT         sq.TimeField
	VIDEO              sq.StringField
}

// SUBMISSIONS creates an instance of the public.submissions table.
func SUBMISSIONS() TABLE_SUBMISSIONS {
	tbl := TABLE_SUBMISSIONS{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "submissions",
	}}
	tbl.CREATED_AT = sq.NewTimeField("created_at", tbl.TableInfo)
	tbl.DELETED_AT = sq.NewTimeField("deleted_at", tbl.TableInfo)
	tbl.OVERRIDE_OPEN = sq.NewBooleanField("override_open", tbl.TableInfo)
	tbl.POSTER = sq.NewStringField("poster", tbl.TableInfo)
	tbl.README = sq.NewStringField("readme", tbl.TableInfo)
	tbl.SUBMISSION_DATA = sq.NewJSONField("submission_data", tbl.TableInfo)
	tbl.SUBMISSION_FORM_ID = sq.NewNumberField("submission_form_id", tbl.TableInfo)
	tbl.SUBMISSION_ID = sq.NewNumberField("submission_id", tbl.TableInfo)
	tbl.SUBMITTED = sq.NewBooleanField("submitted", tbl.TableInfo)
	tbl.TEAM_ID = sq.NewNumberField("team_id", tbl.TableInfo)
	tbl.UPDATED_AT = sq.NewTimeField("updated_at", tbl.TableInfo)
	tbl.VIDEO = sq.NewStringField("video", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_SUBMISSIONS) As(alias string) TABLE_SUBMISSIONS {
	tbl.TableInfo.Alias = alias
	return tbl
}

// TABLE_SUBMISSIONS_CATEGORIES references the public.submissions_categories table.
type TABLE_SUBMISSIONS_CATEGORIES struct {
	*sq.TableInfo
	CATEGORY      sq.StringField
	SUBMISSION_ID sq.NumberField
}

// SUBMISSIONS_CATEGORIES creates an instance of the public.submissions_categories table.
func SUBMISSIONS_CATEGORIES() TABLE_SUBMISSIONS_CATEGORIES {
	tbl := TABLE_SUBMISSIONS_CATEGORIES{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "submissions_categories",
	}}
	tbl.CATEGORY = sq.NewStringField("category", tbl.TableInfo)
	tbl.SUBMISSION_ID = sq.NewNumberField("submission_id", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_SUBMISSIONS_CATEGORIES) As(alias string) TABLE_SUBMISSIONS_CATEGORIES {
	tbl.TableInfo.Alias = alias
	return tbl
}

// TABLE_TEAM_EVALUATION_PAIRS references the public.team_evaluation_pairs table.
type TABLE_TEAM_EVALUATION_PAIRS struct {
	*sq.TableInfo
	EVALUATEE_TEAM_ID sq.NumberField
	EVALUATOR_TEAM_ID sq.NumberField
}

// TEAM_EVALUATION_PAIRS creates an instance of the public.team_evaluation_pairs table.
func TEAM_EVALUATION_PAIRS() TABLE_TEAM_EVALUATION_PAIRS {
	tbl := TABLE_TEAM_EVALUATION_PAIRS{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "team_evaluation_pairs",
	}}
	tbl.EVALUATEE_TEAM_ID = sq.NewNumberField("evaluatee_team_id", tbl.TableInfo)
	tbl.EVALUATOR_TEAM_ID = sq.NewNumberField("evaluator_team_id", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_TEAM_EVALUATION_PAIRS) As(alias string) TABLE_TEAM_EVALUATION_PAIRS {
	tbl.TableInfo.Alias = alias
	return tbl
}

// TABLE_TEAM_EVALUATIONS references the public.team_evaluations table.
type TABLE_TEAM_EVALUATIONS struct {
	*sq.TableInfo
	CREATED_AT              sq.TimeField
	DELETED_AT              sq.TimeField
	EVALUATEE_SUBMISSION_ID sq.NumberField
	EVALUATION_DATA         sq.JSONField
	EVALUATION_FORM_ID      sq.NumberField
	EVALUATOR_TEAM_ID       sq.NumberField
	OVERRIDE_OPEN           sq.BooleanField
	SUBMITTED               sq.BooleanField
	TEAM_EVALUATION_ID      sq.NumberField
	UPDATED_AT              sq.TimeField
}

// TEAM_EVALUATIONS creates an instance of the public.team_evaluations table.
func TEAM_EVALUATIONS() TABLE_TEAM_EVALUATIONS {
	tbl := TABLE_TEAM_EVALUATIONS{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "team_evaluations",
	}}
	tbl.CREATED_AT = sq.NewTimeField("created_at", tbl.TableInfo)
	tbl.DELETED_AT = sq.NewTimeField("deleted_at", tbl.TableInfo)
	tbl.EVALUATEE_SUBMISSION_ID = sq.NewNumberField("evaluatee_submission_id", tbl.TableInfo)
	tbl.EVALUATION_DATA = sq.NewJSONField("evaluation_data", tbl.TableInfo)
	tbl.EVALUATION_FORM_ID = sq.NewNumberField("evaluation_form_id", tbl.TableInfo)
	tbl.EVALUATOR_TEAM_ID = sq.NewNumberField("evaluator_team_id", tbl.TableInfo)
	tbl.OVERRIDE_OPEN = sq.NewBooleanField("override_open", tbl.TableInfo)
	tbl.SUBMITTED = sq.NewBooleanField("submitted", tbl.TableInfo)
	tbl.TEAM_EVALUATION_ID = sq.NewNumberField("team_evaluation_id", tbl.TableInfo)
	tbl.UPDATED_AT = sq.NewTimeField("updated_at", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_TEAM_EVALUATIONS) As(alias string) TABLE_TEAM_EVALUATIONS {
	tbl.TableInfo.Alias = alias
	return tbl
}

// TABLE_TEAMS references the public.teams table.
type TABLE_TEAMS struct {
	*sq.TableInfo
	ADVISER_USER_ROLE_ID sq.NumberField
	COHORT               sq.StringField
	CREATED_AT           sq.TimeField
	DELETED_AT           sq.TimeField
	MENTOR_USER_ROLE_ID  sq.NumberField
	PROJECT_IDEA         sq.StringField
	PROJECT_LEVEL        sq.StringField
	STATUS               sq.StringField
	TEAM_DATA            sq.JSONField
	TEAM_ID              sq.NumberField
	TEAM_NAME            sq.StringField
	UPDATED_AT           sq.TimeField
}

// TEAMS creates an instance of the public.teams table.
func TEAMS() TABLE_TEAMS {
	tbl := TABLE_TEAMS{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "teams",
	}}
	tbl.ADVISER_USER_ROLE_ID = sq.NewNumberField("adviser_user_role_id", tbl.TableInfo)
	tbl.COHORT = sq.NewStringField("cohort", tbl.TableInfo)
	tbl.CREATED_AT = sq.NewTimeField("created_at", tbl.TableInfo)
	tbl.DELETED_AT = sq.NewTimeField("deleted_at", tbl.TableInfo)
	tbl.MENTOR_USER_ROLE_ID = sq.NewNumberField("mentor_user_role_id", tbl.TableInfo)
	tbl.PROJECT_IDEA = sq.NewStringField("project_idea", tbl.TableInfo)
	tbl.PROJECT_LEVEL = sq.NewStringField("project_level", tbl.TableInfo)
	tbl.STATUS = sq.NewStringField("status", tbl.TableInfo)
	tbl.TEAM_DATA = sq.NewJSONField("team_data", tbl.TableInfo)
	tbl.TEAM_ID = sq.NewNumberField("team_id", tbl.TableInfo)
	tbl.TEAM_NAME = sq.NewStringField("team_name", tbl.TableInfo)
	tbl.UPDATED_AT = sq.NewTimeField("updated_at", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_TEAMS) As(alias string) TABLE_TEAMS {
	tbl.TableInfo.Alias = alias
	return tbl
}

// TABLE_TEAMS_STATUS_ENUM references the public.teams_status_enum table.
type TABLE_TEAMS_STATUS_ENUM struct {
	*sq.TableInfo
	STATUS sq.StringField
}

// TEAMS_STATUS_ENUM creates an instance of the public.teams_status_enum table.
func TEAMS_STATUS_ENUM() TABLE_TEAMS_STATUS_ENUM {
	tbl := TABLE_TEAMS_STATUS_ENUM{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "teams_status_enum",
	}}
	tbl.STATUS = sq.NewStringField("status", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_TEAMS_STATUS_ENUM) As(alias string) TABLE_TEAMS_STATUS_ENUM {
	tbl.TableInfo.Alias = alias
	return tbl
}

// TABLE_USER_EVALUATIONS references the public.user_evaluations table.
type TABLE_USER_EVALUATIONS struct {
	*sq.TableInfo
	CREATED_AT              sq.TimeField
	DELETED_AT              sq.TimeField
	EVALUATEE_SUBMISSION_ID sq.NumberField
	EVALUATION_DATA         sq.JSONField
	EVALUATION_FORM_ID      sq.NumberField
	EVALUATOR_USER_ROLE_ID  sq.NumberField
	OVERRIDE_OPEN           sq.BooleanField
	SUBMITTED               sq.BooleanField
	UPDATED_AT              sq.TimeField
	USER_EVALUATION_ID      sq.NumberField
}

// USER_EVALUATIONS creates an instance of the public.user_evaluations table.
func USER_EVALUATIONS() TABLE_USER_EVALUATIONS {
	tbl := TABLE_USER_EVALUATIONS{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "user_evaluations",
	}}
	tbl.CREATED_AT = sq.NewTimeField("created_at", tbl.TableInfo)
	tbl.DELETED_AT = sq.NewTimeField("deleted_at", tbl.TableInfo)
	tbl.EVALUATEE_SUBMISSION_ID = sq.NewNumberField("evaluatee_submission_id", tbl.TableInfo)
	tbl.EVALUATION_DATA = sq.NewJSONField("evaluation_data", tbl.TableInfo)
	tbl.EVALUATION_FORM_ID = sq.NewNumberField("evaluation_form_id", tbl.TableInfo)
	tbl.EVALUATOR_USER_ROLE_ID = sq.NewNumberField("evaluator_user_role_id", tbl.TableInfo)
	tbl.OVERRIDE_OPEN = sq.NewBooleanField("override_open", tbl.TableInfo)
	tbl.SUBMITTED = sq.NewBooleanField("submitted", tbl.TableInfo)
	tbl.UPDATED_AT = sq.NewTimeField("updated_at", tbl.TableInfo)
	tbl.USER_EVALUATION_ID = sq.NewNumberField("user_evaluation_id", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_USER_EVALUATIONS) As(alias string) TABLE_USER_EVALUATIONS {
	tbl.TableInfo.Alias = alias
	return tbl
}

// TABLE_USER_ROLES references the public.user_roles table.
type TABLE_USER_ROLES struct {
	*sq.TableInfo
	COHORT       sq.StringField
	CREATED_AT   sq.TimeField
	DELETED_AT   sq.TimeField
	ROLE         sq.StringField
	UPDATED_AT   sq.TimeField
	USER_ID      sq.NumberField
	USER_ROLE_ID sq.NumberField
}

// USER_ROLES creates an instance of the public.user_roles table.
func USER_ROLES() TABLE_USER_ROLES {
	tbl := TABLE_USER_ROLES{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "user_roles",
	}}
	tbl.COHORT = sq.NewStringField("cohort", tbl.TableInfo)
	tbl.CREATED_AT = sq.NewTimeField("created_at", tbl.TableInfo)
	tbl.DELETED_AT = sq.NewTimeField("deleted_at", tbl.TableInfo)
	tbl.ROLE = sq.NewStringField("role", tbl.TableInfo)
	tbl.UPDATED_AT = sq.NewTimeField("updated_at", tbl.TableInfo)
	tbl.USER_ID = sq.NewNumberField("user_id", tbl.TableInfo)
	tbl.USER_ROLE_ID = sq.NewNumberField("user_role_id", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_USER_ROLES) As(alias string) TABLE_USER_ROLES {
	tbl.TableInfo.Alias = alias
	return tbl
}

// TABLE_USER_ROLES_APPLICANTS references the public.user_roles_applicants table.
type TABLE_USER_ROLES_APPLICANTS struct {
	*sq.TableInfo
	APPLICANT_DATA    sq.JSONField
	APPLICANT_FORM_ID sq.NumberField
	APPLICATION_ID    sq.NumberField
	USER_ROLE_ID      sq.NumberField
}

// USER_ROLES_APPLICANTS creates an instance of the public.user_roles_applicants table.
func USER_ROLES_APPLICANTS() TABLE_USER_ROLES_APPLICANTS {
	tbl := TABLE_USER_ROLES_APPLICANTS{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "user_roles_applicants",
	}}
	tbl.APPLICANT_DATA = sq.NewJSONField("applicant_data", tbl.TableInfo)
	tbl.APPLICANT_FORM_ID = sq.NewNumberField("applicant_form_id", tbl.TableInfo)
	tbl.APPLICATION_ID = sq.NewNumberField("application_id", tbl.TableInfo)
	tbl.USER_ROLE_ID = sq.NewNumberField("user_role_id", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_USER_ROLES_APPLICANTS) As(alias string) TABLE_USER_ROLES_APPLICANTS {
	tbl.TableInfo.Alias = alias
	return tbl
}

// TABLE_USER_ROLES_STUDENTS references the public.user_roles_students table.
type TABLE_USER_ROLES_STUDENTS struct {
	*sq.TableInfo
	STUDENT_DATA sq.JSONField
	TEAM_ID      sq.NumberField
	USER_ROLE_ID sq.NumberField
}

// USER_ROLES_STUDENTS creates an instance of the public.user_roles_students table.
func USER_ROLES_STUDENTS() TABLE_USER_ROLES_STUDENTS {
	tbl := TABLE_USER_ROLES_STUDENTS{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "user_roles_students",
	}}
	tbl.STUDENT_DATA = sq.NewJSONField("student_data", tbl.TableInfo)
	tbl.TEAM_ID = sq.NewNumberField("team_id", tbl.TableInfo)
	tbl.USER_ROLE_ID = sq.NewNumberField("user_role_id", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_USER_ROLES_STUDENTS) As(alias string) TABLE_USER_ROLES_STUDENTS {
	tbl.TableInfo.Alias = alias
	return tbl
}

// TABLE_USERS references the public.users table.
type TABLE_USERS struct {
	*sq.TableInfo
	DISPLAYNAME sq.StringField
	EMAIL       sq.StringField
	PASSWORD    sq.StringField
	USER_ID     sq.NumberField
}

// USERS creates an instance of the public.users table.
func USERS() TABLE_USERS {
	tbl := TABLE_USERS{TableInfo: &sq.TableInfo{
		Schema: "public",
		Name:   "users",
	}}
	tbl.DISPLAYNAME = sq.NewStringField("displayname", tbl.TableInfo)
	tbl.EMAIL = sq.NewStringField("email", tbl.TableInfo)
	tbl.PASSWORD = sq.NewStringField("password", tbl.TableInfo)
	tbl.USER_ID = sq.NewNumberField("user_id", tbl.TableInfo)
	return tbl
}

// As modifies the alias of the underlying table.
func (tbl TABLE_USERS) As(alias string) TABLE_USERS {
	tbl.TableInfo.Alias = alias
	return tbl
}
`

const expectedFunctions = `// Code generated by 'sqgen-postgres functions'; DO NOT EDIT.
package tables

import (
	sq "github.com/bokwoon95/go-structured-query/postgres"
)

// FUNCTION_PUBLIC__ARMOR1 references the public.armor function.
type FUNCTION_PUBLIC__ARMOR1 struct {
	*sq.FunctionInfo
	RESULT sq.StringField
}

// PUBLIC__ARMOR1 creates an instance of the public.armor function.
func PUBLIC__ARMOR1(
	_arg1 []byte,
) FUNCTION_PUBLIC__ARMOR1 {
	return PUBLIC__ARMOR1_(_arg1)
}

// PUBLIC__ARMOR1_ creates an instance of the public.armor function.
func PUBLIC__ARMOR1_(
	_arg1 interface{},
) FUNCTION_PUBLIC__ARMOR1 {
	f := FUNCTION_PUBLIC__ARMOR1{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "armor",
		Arguments: []interface{}{_arg1},
	}}
	f.RESULT = sq.NewStringField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PUBLIC__ARMOR1) As(alias string) FUNCTION_PUBLIC__ARMOR1 {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_PUBLIC__ARMOR2 references the public.armor function.
type FUNCTION_PUBLIC__ARMOR2 struct {
	*sq.FunctionInfo
	RESULT sq.StringField
}

// PUBLIC__ARMOR2 creates an instance of the public.armor function.
func PUBLIC__ARMOR2(
	_arg1 []byte,
	_arg2 []string,
	_arg3 []string,
) FUNCTION_PUBLIC__ARMOR2 {
	return PUBLIC__ARMOR2_(_arg1, _arg2, _arg3)
}

// PUBLIC__ARMOR2_ creates an instance of the public.armor function.
func PUBLIC__ARMOR2_(
	_arg1 interface{},
	_arg2 interface{},
	_arg3 interface{},
) FUNCTION_PUBLIC__ARMOR2 {
	f := FUNCTION_PUBLIC__ARMOR2{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "armor",
		Arguments: []interface{}{_arg1, _arg2, _arg3},
	}}
	f.RESULT = sq.NewStringField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PUBLIC__ARMOR2) As(alias string) FUNCTION_PUBLIC__ARMOR2 {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_CRYPT references the public.crypt function.
type FUNCTION_CRYPT struct {
	*sq.FunctionInfo
	RESULT sq.StringField
}

// CRYPT creates an instance of the public.crypt function.
func CRYPT(
	_arg1 string,
	_arg2 string,
) FUNCTION_CRYPT {
	return CRYPT_(_arg1, _arg2)
}

// CRYPT_ creates an instance of the public.crypt function.
func CRYPT_(
	_arg1 interface{},
	_arg2 interface{},
) FUNCTION_CRYPT {
	f := FUNCTION_CRYPT{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "crypt",
		Arguments: []interface{}{_arg1, _arg2},
	}}
	f.RESULT = sq.NewStringField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_CRYPT) As(alias string) FUNCTION_CRYPT {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_DEARMOR references the public.dearmor function.
type FUNCTION_DEARMOR struct {
	*sq.FunctionInfo
	RESULT sq.BinaryField
}

// DEARMOR creates an instance of the public.dearmor function.
func DEARMOR(
	_arg1 string,
) FUNCTION_DEARMOR {
	return DEARMOR_(_arg1)
}

// DEARMOR_ creates an instance of the public.dearmor function.
func DEARMOR_(
	_arg1 interface{},
) FUNCTION_DEARMOR {
	f := FUNCTION_DEARMOR{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "dearmor",
		Arguments: []interface{}{_arg1},
	}}
	f.RESULT = sq.NewBinaryField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_DEARMOR) As(alias string) FUNCTION_DEARMOR {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_DECRYPT references the public.decrypt function.
type FUNCTION_DECRYPT struct {
	*sq.FunctionInfo
	RESULT sq.BinaryField
}

// DECRYPT creates an instance of the public.decrypt function.
func DECRYPT(
	_arg1 []byte,
	_arg2 []byte,
	_arg3 string,
) FUNCTION_DECRYPT {
	return DECRYPT_(_arg1, _arg2, _arg3)
}

// DECRYPT_ creates an instance of the public.decrypt function.
func DECRYPT_(
	_arg1 interface{},
	_arg2 interface{},
	_arg3 interface{},
) FUNCTION_DECRYPT {
	f := FUNCTION_DECRYPT{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "decrypt",
		Arguments: []interface{}{_arg1, _arg2, _arg3},
	}}
	f.RESULT = sq.NewBinaryField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_DECRYPT) As(alias string) FUNCTION_DECRYPT {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_DECRYPT_IV references the public.decrypt_iv function.
type FUNCTION_DECRYPT_IV struct {
	*sq.FunctionInfo
	RESULT sq.BinaryField
}

// DECRYPT_IV creates an instance of the public.decrypt_iv function.
func DECRYPT_IV(
	_arg1 []byte,
	_arg2 []byte,
	_arg3 []byte,
	_arg4 string,
) FUNCTION_DECRYPT_IV {
	return DECRYPT_IV_(_arg1, _arg2, _arg3, _arg4)
}

// DECRYPT_IV_ creates an instance of the public.decrypt_iv function.
func DECRYPT_IV_(
	_arg1 interface{},
	_arg2 interface{},
	_arg3 interface{},
	_arg4 interface{},
) FUNCTION_DECRYPT_IV {
	f := FUNCTION_DECRYPT_IV{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "decrypt_iv",
		Arguments: []interface{}{_arg1, _arg2, _arg3, _arg4},
	}}
	f.RESULT = sq.NewBinaryField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_DECRYPT_IV) As(alias string) FUNCTION_DECRYPT_IV {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_PUBLIC__DIGEST1 references the public.digest function.
type FUNCTION_PUBLIC__DIGEST1 struct {
	*sq.FunctionInfo
	RESULT sq.BinaryField
}

// PUBLIC__DIGEST1 creates an instance of the public.digest function.
func PUBLIC__DIGEST1(
	_arg1 []byte,
	_arg2 string,
) FUNCTION_PUBLIC__DIGEST1 {
	return PUBLIC__DIGEST1_(_arg1, _arg2)
}

// PUBLIC__DIGEST1_ creates an instance of the public.digest function.
func PUBLIC__DIGEST1_(
	_arg1 interface{},
	_arg2 interface{},
) FUNCTION_PUBLIC__DIGEST1 {
	f := FUNCTION_PUBLIC__DIGEST1{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "digest",
		Arguments: []interface{}{_arg1, _arg2},
	}}
	f.RESULT = sq.NewBinaryField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PUBLIC__DIGEST1) As(alias string) FUNCTION_PUBLIC__DIGEST1 {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_PUBLIC__DIGEST2 references the public.digest function.
type FUNCTION_PUBLIC__DIGEST2 struct {
	*sq.FunctionInfo
	RESULT sq.BinaryField
}

// PUBLIC__DIGEST2 creates an instance of the public.digest function.
func PUBLIC__DIGEST2(
	_arg1 string,
	_arg2 string,
) FUNCTION_PUBLIC__DIGEST2 {
	return PUBLIC__DIGEST2_(_arg1, _arg2)
}

// PUBLIC__DIGEST2_ creates an instance of the public.digest function.
func PUBLIC__DIGEST2_(
	_arg1 interface{},
	_arg2 interface{},
) FUNCTION_PUBLIC__DIGEST2 {
	f := FUNCTION_PUBLIC__DIGEST2{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "digest",
		Arguments: []interface{}{_arg1, _arg2},
	}}
	f.RESULT = sq.NewBinaryField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PUBLIC__DIGEST2) As(alias string) FUNCTION_PUBLIC__DIGEST2 {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_ENCRYPT references the public.encrypt function.
type FUNCTION_ENCRYPT struct {
	*sq.FunctionInfo
	RESULT sq.BinaryField
}

// ENCRYPT creates an instance of the public.encrypt function.
func ENCRYPT(
	_arg1 []byte,
	_arg2 []byte,
	_arg3 string,
) FUNCTION_ENCRYPT {
	return ENCRYPT_(_arg1, _arg2, _arg3)
}

// ENCRYPT_ creates an instance of the public.encrypt function.
func ENCRYPT_(
	_arg1 interface{},
	_arg2 interface{},
	_arg3 interface{},
) FUNCTION_ENCRYPT {
	f := FUNCTION_ENCRYPT{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "encrypt",
		Arguments: []interface{}{_arg1, _arg2, _arg3},
	}}
	f.RESULT = sq.NewBinaryField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_ENCRYPT) As(alias string) FUNCTION_ENCRYPT {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_ENCRYPT_IV references the public.encrypt_iv function.
type FUNCTION_ENCRYPT_IV struct {
	*sq.FunctionInfo
	RESULT sq.BinaryField
}

// ENCRYPT_IV creates an instance of the public.encrypt_iv function.
func ENCRYPT_IV(
	_arg1 []byte,
	_arg2 []byte,
	_arg3 []byte,
	_arg4 string,
) FUNCTION_ENCRYPT_IV {
	return ENCRYPT_IV_(_arg1, _arg2, _arg3, _arg4)
}

// ENCRYPT_IV_ creates an instance of the public.encrypt_iv function.
func ENCRYPT_IV_(
	_arg1 interface{},
	_arg2 interface{},
	_arg3 interface{},
	_arg4 interface{},
) FUNCTION_ENCRYPT_IV {
	f := FUNCTION_ENCRYPT_IV{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "encrypt_iv",
		Arguments: []interface{}{_arg1, _arg2, _arg3, _arg4},
	}}
	f.RESULT = sq.NewBinaryField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_ENCRYPT_IV) As(alias string) FUNCTION_ENCRYPT_IV {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_GEN_RANDOM_BYTES references the public.gen_random_bytes function.
type FUNCTION_GEN_RANDOM_BYTES struct {
	*sq.FunctionInfo
	RESULT sq.BinaryField
}

// GEN_RANDOM_BYTES creates an instance of the public.gen_random_bytes function.
func GEN_RANDOM_BYTES(
	_arg1 int,
) FUNCTION_GEN_RANDOM_BYTES {
	return GEN_RANDOM_BYTES_(_arg1)
}

// GEN_RANDOM_BYTES_ creates an instance of the public.gen_random_bytes function.
func GEN_RANDOM_BYTES_(
	_arg1 interface{},
) FUNCTION_GEN_RANDOM_BYTES {
	f := FUNCTION_GEN_RANDOM_BYTES{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "gen_random_bytes",
		Arguments: []interface{}{_arg1},
	}}
	f.RESULT = sq.NewBinaryField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_GEN_RANDOM_BYTES) As(alias string) FUNCTION_GEN_RANDOM_BYTES {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_PUBLIC__GEN_SALT1 references the public.gen_salt function.
type FUNCTION_PUBLIC__GEN_SALT1 struct {
	*sq.FunctionInfo
	RESULT sq.StringField
}

// PUBLIC__GEN_SALT1 creates an instance of the public.gen_salt function.
func PUBLIC__GEN_SALT1(
	_arg1 string,
	_arg2 int,
) FUNCTION_PUBLIC__GEN_SALT1 {
	return PUBLIC__GEN_SALT1_(_arg1, _arg2)
}

// PUBLIC__GEN_SALT1_ creates an instance of the public.gen_salt function.
func PUBLIC__GEN_SALT1_(
	_arg1 interface{},
	_arg2 interface{},
) FUNCTION_PUBLIC__GEN_SALT1 {
	f := FUNCTION_PUBLIC__GEN_SALT1{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "gen_salt",
		Arguments: []interface{}{_arg1, _arg2},
	}}
	f.RESULT = sq.NewStringField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PUBLIC__GEN_SALT1) As(alias string) FUNCTION_PUBLIC__GEN_SALT1 {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_PUBLIC__GEN_SALT2 references the public.gen_salt function.
type FUNCTION_PUBLIC__GEN_SALT2 struct {
	*sq.FunctionInfo
	RESULT sq.StringField
}

// PUBLIC__GEN_SALT2 creates an instance of the public.gen_salt function.
func PUBLIC__GEN_SALT2(
	_arg1 string,
) FUNCTION_PUBLIC__GEN_SALT2 {
	return PUBLIC__GEN_SALT2_(_arg1)
}

// PUBLIC__GEN_SALT2_ creates an instance of the public.gen_salt function.
func PUBLIC__GEN_SALT2_(
	_arg1 interface{},
) FUNCTION_PUBLIC__GEN_SALT2 {
	f := FUNCTION_PUBLIC__GEN_SALT2{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "gen_salt",
		Arguments: []interface{}{_arg1},
	}}
	f.RESULT = sq.NewStringField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PUBLIC__GEN_SALT2) As(alias string) FUNCTION_PUBLIC__GEN_SALT2 {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_PUBLIC__HMAC1 references the public.hmac function.
type FUNCTION_PUBLIC__HMAC1 struct {
	*sq.FunctionInfo
	RESULT sq.BinaryField
}

// PUBLIC__HMAC1 creates an instance of the public.hmac function.
func PUBLIC__HMAC1(
	_arg1 string,
	_arg2 string,
	_arg3 string,
) FUNCTION_PUBLIC__HMAC1 {
	return PUBLIC__HMAC1_(_arg1, _arg2, _arg3)
}

// PUBLIC__HMAC1_ creates an instance of the public.hmac function.
func PUBLIC__HMAC1_(
	_arg1 interface{},
	_arg2 interface{},
	_arg3 interface{},
) FUNCTION_PUBLIC__HMAC1 {
	f := FUNCTION_PUBLIC__HMAC1{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "hmac",
		Arguments: []interface{}{_arg1, _arg2, _arg3},
	}}
	f.RESULT = sq.NewBinaryField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PUBLIC__HMAC1) As(alias string) FUNCTION_PUBLIC__HMAC1 {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_PUBLIC__HMAC2 references the public.hmac function.
type FUNCTION_PUBLIC__HMAC2 struct {
	*sq.FunctionInfo
	RESULT sq.BinaryField
}

// PUBLIC__HMAC2 creates an instance of the public.hmac function.
func PUBLIC__HMAC2(
	_arg1 []byte,
	_arg2 []byte,
	_arg3 string,
) FUNCTION_PUBLIC__HMAC2 {
	return PUBLIC__HMAC2_(_arg1, _arg2, _arg3)
}

// PUBLIC__HMAC2_ creates an instance of the public.hmac function.
func PUBLIC__HMAC2_(
	_arg1 interface{},
	_arg2 interface{},
	_arg3 interface{},
) FUNCTION_PUBLIC__HMAC2 {
	f := FUNCTION_PUBLIC__HMAC2{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "hmac",
		Arguments: []interface{}{_arg1, _arg2, _arg3},
	}}
	f.RESULT = sq.NewBinaryField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PUBLIC__HMAC2) As(alias string) FUNCTION_PUBLIC__HMAC2 {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_PGP_KEY_ID references the public.pgp_key_id function.
type FUNCTION_PGP_KEY_ID struct {
	*sq.FunctionInfo
	RESULT sq.StringField
}

// PGP_KEY_ID creates an instance of the public.pgp_key_id function.
func PGP_KEY_ID(
	_arg1 []byte,
) FUNCTION_PGP_KEY_ID {
	return PGP_KEY_ID_(_arg1)
}

// PGP_KEY_ID_ creates an instance of the public.pgp_key_id function.
func PGP_KEY_ID_(
	_arg1 interface{},
) FUNCTION_PGP_KEY_ID {
	f := FUNCTION_PGP_KEY_ID{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "pgp_key_id",
		Arguments: []interface{}{_arg1},
	}}
	f.RESULT = sq.NewStringField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PGP_KEY_ID) As(alias string) FUNCTION_PGP_KEY_ID {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_PUBLIC__PGP_PUB_DECRYPT1 references the public.pgp_pub_decrypt function.
type FUNCTION_PUBLIC__PGP_PUB_DECRYPT1 struct {
	*sq.FunctionInfo
	RESULT sq.StringField
}

// PUBLIC__PGP_PUB_DECRYPT1 creates an instance of the public.pgp_pub_decrypt function.
func PUBLIC__PGP_PUB_DECRYPT1(
	_arg1 []byte,
	_arg2 []byte,
	_arg3 string,
) FUNCTION_PUBLIC__PGP_PUB_DECRYPT1 {
	return PUBLIC__PGP_PUB_DECRYPT1_(_arg1, _arg2, _arg3)
}

// PUBLIC__PGP_PUB_DECRYPT1_ creates an instance of the public.pgp_pub_decrypt function.
func PUBLIC__PGP_PUB_DECRYPT1_(
	_arg1 interface{},
	_arg2 interface{},
	_arg3 interface{},
) FUNCTION_PUBLIC__PGP_PUB_DECRYPT1 {
	f := FUNCTION_PUBLIC__PGP_PUB_DECRYPT1{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "pgp_pub_decrypt",
		Arguments: []interface{}{_arg1, _arg2, _arg3},
	}}
	f.RESULT = sq.NewStringField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PUBLIC__PGP_PUB_DECRYPT1) As(alias string) FUNCTION_PUBLIC__PGP_PUB_DECRYPT1 {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_PUBLIC__PGP_PUB_DECRYPT2 references the public.pgp_pub_decrypt function.
type FUNCTION_PUBLIC__PGP_PUB_DECRYPT2 struct {
	*sq.FunctionInfo
	RESULT sq.StringField
}

// PUBLIC__PGP_PUB_DECRYPT2 creates an instance of the public.pgp_pub_decrypt function.
func PUBLIC__PGP_PUB_DECRYPT2(
	_arg1 []byte,
	_arg2 []byte,
) FUNCTION_PUBLIC__PGP_PUB_DECRYPT2 {
	return PUBLIC__PGP_PUB_DECRYPT2_(_arg1, _arg2)
}

// PUBLIC__PGP_PUB_DECRYPT2_ creates an instance of the public.pgp_pub_decrypt function.
func PUBLIC__PGP_PUB_DECRYPT2_(
	_arg1 interface{},
	_arg2 interface{},
) FUNCTION_PUBLIC__PGP_PUB_DECRYPT2 {
	f := FUNCTION_PUBLIC__PGP_PUB_DECRYPT2{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "pgp_pub_decrypt",
		Arguments: []interface{}{_arg1, _arg2},
	}}
	f.RESULT = sq.NewStringField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PUBLIC__PGP_PUB_DECRYPT2) As(alias string) FUNCTION_PUBLIC__PGP_PUB_DECRYPT2 {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_PUBLIC__PGP_PUB_DECRYPT3 references the public.pgp_pub_decrypt function.
type FUNCTION_PUBLIC__PGP_PUB_DECRYPT3 struct {
	*sq.FunctionInfo
	RESULT sq.StringField
}

// PUBLIC__PGP_PUB_DECRYPT3 creates an instance of the public.pgp_pub_decrypt function.
func PUBLIC__PGP_PUB_DECRYPT3(
	_arg1 []byte,
	_arg2 []byte,
	_arg3 string,
	_arg4 string,
) FUNCTION_PUBLIC__PGP_PUB_DECRYPT3 {
	return PUBLIC__PGP_PUB_DECRYPT3_(_arg1, _arg2, _arg3, _arg4)
}

// PUBLIC__PGP_PUB_DECRYPT3_ creates an instance of the public.pgp_pub_decrypt function.
func PUBLIC__PGP_PUB_DECRYPT3_(
	_arg1 interface{},
	_arg2 interface{},
	_arg3 interface{},
	_arg4 interface{},
) FUNCTION_PUBLIC__PGP_PUB_DECRYPT3 {
	f := FUNCTION_PUBLIC__PGP_PUB_DECRYPT3{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "pgp_pub_decrypt",
		Arguments: []interface{}{_arg1, _arg2, _arg3, _arg4},
	}}
	f.RESULT = sq.NewStringField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PUBLIC__PGP_PUB_DECRYPT3) As(alias string) FUNCTION_PUBLIC__PGP_PUB_DECRYPT3 {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_PUBLIC__PGP_PUB_DECRYPT_BYTEA1 references the public.pgp_pub_decrypt_bytea function.
type FUNCTION_PUBLIC__PGP_PUB_DECRYPT_BYTEA1 struct {
	*sq.FunctionInfo
	RESULT sq.BinaryField
}

// PUBLIC__PGP_PUB_DECRYPT_BYTEA1 creates an instance of the public.pgp_pub_decrypt_bytea function.
func PUBLIC__PGP_PUB_DECRYPT_BYTEA1(
	_arg1 []byte,
	_arg2 []byte,
	_arg3 string,
) FUNCTION_PUBLIC__PGP_PUB_DECRYPT_BYTEA1 {
	return PUBLIC__PGP_PUB_DECRYPT_BYTEA1_(_arg1, _arg2, _arg3)
}

// PUBLIC__PGP_PUB_DECRYPT_BYTEA1_ creates an instance of the public.pgp_pub_decrypt_bytea function.
func PUBLIC__PGP_PUB_DECRYPT_BYTEA1_(
	_arg1 interface{},
	_arg2 interface{},
	_arg3 interface{},
) FUNCTION_PUBLIC__PGP_PUB_DECRYPT_BYTEA1 {
	f := FUNCTION_PUBLIC__PGP_PUB_DECRYPT_BYTEA1{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "pgp_pub_decrypt_bytea",
		Arguments: []interface{}{_arg1, _arg2, _arg3},
	}}
	f.RESULT = sq.NewBinaryField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PUBLIC__PGP_PUB_DECRYPT_BYTEA1) As(alias string) FUNCTION_PUBLIC__PGP_PUB_DECRYPT_BYTEA1 {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_PUBLIC__PGP_PUB_DECRYPT_BYTEA2 references the public.pgp_pub_decrypt_bytea function.
type FUNCTION_PUBLIC__PGP_PUB_DECRYPT_BYTEA2 struct {
	*sq.FunctionInfo
	RESULT sq.BinaryField
}

// PUBLIC__PGP_PUB_DECRYPT_BYTEA2 creates an instance of the public.pgp_pub_decrypt_bytea function.
func PUBLIC__PGP_PUB_DECRYPT_BYTEA2(
	_arg1 []byte,
	_arg2 []byte,
	_arg3 string,
	_arg4 string,
) FUNCTION_PUBLIC__PGP_PUB_DECRYPT_BYTEA2 {
	return PUBLIC__PGP_PUB_DECRYPT_BYTEA2_(_arg1, _arg2, _arg3, _arg4)
}

// PUBLIC__PGP_PUB_DECRYPT_BYTEA2_ creates an instance of the public.pgp_pub_decrypt_bytea function.
func PUBLIC__PGP_PUB_DECRYPT_BYTEA2_(
	_arg1 interface{},
	_arg2 interface{},
	_arg3 interface{},
	_arg4 interface{},
) FUNCTION_PUBLIC__PGP_PUB_DECRYPT_BYTEA2 {
	f := FUNCTION_PUBLIC__PGP_PUB_DECRYPT_BYTEA2{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "pgp_pub_decrypt_bytea",
		Arguments: []interface{}{_arg1, _arg2, _arg3, _arg4},
	}}
	f.RESULT = sq.NewBinaryField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PUBLIC__PGP_PUB_DECRYPT_BYTEA2) As(alias string) FUNCTION_PUBLIC__PGP_PUB_DECRYPT_BYTEA2 {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_PUBLIC__PGP_PUB_DECRYPT_BYTEA3 references the public.pgp_pub_decrypt_bytea function.
type FUNCTION_PUBLIC__PGP_PUB_DECRYPT_BYTEA3 struct {
	*sq.FunctionInfo
	RESULT sq.BinaryField
}

// PUBLIC__PGP_PUB_DECRYPT_BYTEA3 creates an instance of the public.pgp_pub_decrypt_bytea function.
func PUBLIC__PGP_PUB_DECRYPT_BYTEA3(
	_arg1 []byte,
	_arg2 []byte,
) FUNCTION_PUBLIC__PGP_PUB_DECRYPT_BYTEA3 {
	return PUBLIC__PGP_PUB_DECRYPT_BYTEA3_(_arg1, _arg2)
}

// PUBLIC__PGP_PUB_DECRYPT_BYTEA3_ creates an instance of the public.pgp_pub_decrypt_bytea function.
func PUBLIC__PGP_PUB_DECRYPT_BYTEA3_(
	_arg1 interface{},
	_arg2 interface{},
) FUNCTION_PUBLIC__PGP_PUB_DECRYPT_BYTEA3 {
	f := FUNCTION_PUBLIC__PGP_PUB_DECRYPT_BYTEA3{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "pgp_pub_decrypt_bytea",
		Arguments: []interface{}{_arg1, _arg2},
	}}
	f.RESULT = sq.NewBinaryField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PUBLIC__PGP_PUB_DECRYPT_BYTEA3) As(alias string) FUNCTION_PUBLIC__PGP_PUB_DECRYPT_BYTEA3 {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_PUBLIC__PGP_PUB_ENCRYPT1 references the public.pgp_pub_encrypt function.
type FUNCTION_PUBLIC__PGP_PUB_ENCRYPT1 struct {
	*sq.FunctionInfo
	RESULT sq.BinaryField
}

// PUBLIC__PGP_PUB_ENCRYPT1 creates an instance of the public.pgp_pub_encrypt function.
func PUBLIC__PGP_PUB_ENCRYPT1(
	_arg1 string,
	_arg2 []byte,
) FUNCTION_PUBLIC__PGP_PUB_ENCRYPT1 {
	return PUBLIC__PGP_PUB_ENCRYPT1_(_arg1, _arg2)
}

// PUBLIC__PGP_PUB_ENCRYPT1_ creates an instance of the public.pgp_pub_encrypt function.
func PUBLIC__PGP_PUB_ENCRYPT1_(
	_arg1 interface{},
	_arg2 interface{},
) FUNCTION_PUBLIC__PGP_PUB_ENCRYPT1 {
	f := FUNCTION_PUBLIC__PGP_PUB_ENCRYPT1{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "pgp_pub_encrypt",
		Arguments: []interface{}{_arg1, _arg2},
	}}
	f.RESULT = sq.NewBinaryField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PUBLIC__PGP_PUB_ENCRYPT1) As(alias string) FUNCTION_PUBLIC__PGP_PUB_ENCRYPT1 {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_PUBLIC__PGP_PUB_ENCRYPT2 references the public.pgp_pub_encrypt function.
type FUNCTION_PUBLIC__PGP_PUB_ENCRYPT2 struct {
	*sq.FunctionInfo
	RESULT sq.BinaryField
}

// PUBLIC__PGP_PUB_ENCRYPT2 creates an instance of the public.pgp_pub_encrypt function.
func PUBLIC__PGP_PUB_ENCRYPT2(
	_arg1 string,
	_arg2 []byte,
	_arg3 string,
) FUNCTION_PUBLIC__PGP_PUB_ENCRYPT2 {
	return PUBLIC__PGP_PUB_ENCRYPT2_(_arg1, _arg2, _arg3)
}

// PUBLIC__PGP_PUB_ENCRYPT2_ creates an instance of the public.pgp_pub_encrypt function.
func PUBLIC__PGP_PUB_ENCRYPT2_(
	_arg1 interface{},
	_arg2 interface{},
	_arg3 interface{},
) FUNCTION_PUBLIC__PGP_PUB_ENCRYPT2 {
	f := FUNCTION_PUBLIC__PGP_PUB_ENCRYPT2{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "pgp_pub_encrypt",
		Arguments: []interface{}{_arg1, _arg2, _arg3},
	}}
	f.RESULT = sq.NewBinaryField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PUBLIC__PGP_PUB_ENCRYPT2) As(alias string) FUNCTION_PUBLIC__PGP_PUB_ENCRYPT2 {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_PUBLIC__PGP_PUB_ENCRYPT_BYTEA1 references the public.pgp_pub_encrypt_bytea function.
type FUNCTION_PUBLIC__PGP_PUB_ENCRYPT_BYTEA1 struct {
	*sq.FunctionInfo
	RESULT sq.BinaryField
}

// PUBLIC__PGP_PUB_ENCRYPT_BYTEA1 creates an instance of the public.pgp_pub_encrypt_bytea function.
func PUBLIC__PGP_PUB_ENCRYPT_BYTEA1(
	_arg1 []byte,
	_arg2 []byte,
	_arg3 string,
) FUNCTION_PUBLIC__PGP_PUB_ENCRYPT_BYTEA1 {
	return PUBLIC__PGP_PUB_ENCRYPT_BYTEA1_(_arg1, _arg2, _arg3)
}

// PUBLIC__PGP_PUB_ENCRYPT_BYTEA1_ creates an instance of the public.pgp_pub_encrypt_bytea function.
func PUBLIC__PGP_PUB_ENCRYPT_BYTEA1_(
	_arg1 interface{},
	_arg2 interface{},
	_arg3 interface{},
) FUNCTION_PUBLIC__PGP_PUB_ENCRYPT_BYTEA1 {
	f := FUNCTION_PUBLIC__PGP_PUB_ENCRYPT_BYTEA1{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "pgp_pub_encrypt_bytea",
		Arguments: []interface{}{_arg1, _arg2, _arg3},
	}}
	f.RESULT = sq.NewBinaryField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PUBLIC__PGP_PUB_ENCRYPT_BYTEA1) As(alias string) FUNCTION_PUBLIC__PGP_PUB_ENCRYPT_BYTEA1 {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_PUBLIC__PGP_PUB_ENCRYPT_BYTEA2 references the public.pgp_pub_encrypt_bytea function.
type FUNCTION_PUBLIC__PGP_PUB_ENCRYPT_BYTEA2 struct {
	*sq.FunctionInfo
	RESULT sq.BinaryField
}

// PUBLIC__PGP_PUB_ENCRYPT_BYTEA2 creates an instance of the public.pgp_pub_encrypt_bytea function.
func PUBLIC__PGP_PUB_ENCRYPT_BYTEA2(
	_arg1 []byte,
	_arg2 []byte,
) FUNCTION_PUBLIC__PGP_PUB_ENCRYPT_BYTEA2 {
	return PUBLIC__PGP_PUB_ENCRYPT_BYTEA2_(_arg1, _arg2)
}

// PUBLIC__PGP_PUB_ENCRYPT_BYTEA2_ creates an instance of the public.pgp_pub_encrypt_bytea function.
func PUBLIC__PGP_PUB_ENCRYPT_BYTEA2_(
	_arg1 interface{},
	_arg2 interface{},
) FUNCTION_PUBLIC__PGP_PUB_ENCRYPT_BYTEA2 {
	f := FUNCTION_PUBLIC__PGP_PUB_ENCRYPT_BYTEA2{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "pgp_pub_encrypt_bytea",
		Arguments: []interface{}{_arg1, _arg2},
	}}
	f.RESULT = sq.NewBinaryField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PUBLIC__PGP_PUB_ENCRYPT_BYTEA2) As(alias string) FUNCTION_PUBLIC__PGP_PUB_ENCRYPT_BYTEA2 {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_PUBLIC__PGP_SYM_DECRYPT1 references the public.pgp_sym_decrypt function.
type FUNCTION_PUBLIC__PGP_SYM_DECRYPT1 struct {
	*sq.FunctionInfo
	RESULT sq.StringField
}

// PUBLIC__PGP_SYM_DECRYPT1 creates an instance of the public.pgp_sym_decrypt function.
func PUBLIC__PGP_SYM_DECRYPT1(
	_arg1 []byte,
	_arg2 string,
) FUNCTION_PUBLIC__PGP_SYM_DECRYPT1 {
	return PUBLIC__PGP_SYM_DECRYPT1_(_arg1, _arg2)
}

// PUBLIC__PGP_SYM_DECRYPT1_ creates an instance of the public.pgp_sym_decrypt function.
func PUBLIC__PGP_SYM_DECRYPT1_(
	_arg1 interface{},
	_arg2 interface{},
) FUNCTION_PUBLIC__PGP_SYM_DECRYPT1 {
	f := FUNCTION_PUBLIC__PGP_SYM_DECRYPT1{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "pgp_sym_decrypt",
		Arguments: []interface{}{_arg1, _arg2},
	}}
	f.RESULT = sq.NewStringField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PUBLIC__PGP_SYM_DECRYPT1) As(alias string) FUNCTION_PUBLIC__PGP_SYM_DECRYPT1 {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_PUBLIC__PGP_SYM_DECRYPT2 references the public.pgp_sym_decrypt function.
type FUNCTION_PUBLIC__PGP_SYM_DECRYPT2 struct {
	*sq.FunctionInfo
	RESULT sq.StringField
}

// PUBLIC__PGP_SYM_DECRYPT2 creates an instance of the public.pgp_sym_decrypt function.
func PUBLIC__PGP_SYM_DECRYPT2(
	_arg1 []byte,
	_arg2 string,
	_arg3 string,
) FUNCTION_PUBLIC__PGP_SYM_DECRYPT2 {
	return PUBLIC__PGP_SYM_DECRYPT2_(_arg1, _arg2, _arg3)
}

// PUBLIC__PGP_SYM_DECRYPT2_ creates an instance of the public.pgp_sym_decrypt function.
func PUBLIC__PGP_SYM_DECRYPT2_(
	_arg1 interface{},
	_arg2 interface{},
	_arg3 interface{},
) FUNCTION_PUBLIC__PGP_SYM_DECRYPT2 {
	f := FUNCTION_PUBLIC__PGP_SYM_DECRYPT2{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "pgp_sym_decrypt",
		Arguments: []interface{}{_arg1, _arg2, _arg3},
	}}
	f.RESULT = sq.NewStringField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PUBLIC__PGP_SYM_DECRYPT2) As(alias string) FUNCTION_PUBLIC__PGP_SYM_DECRYPT2 {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_PUBLIC__PGP_SYM_DECRYPT_BYTEA1 references the public.pgp_sym_decrypt_bytea function.
type FUNCTION_PUBLIC__PGP_SYM_DECRYPT_BYTEA1 struct {
	*sq.FunctionInfo
	RESULT sq.BinaryField
}

// PUBLIC__PGP_SYM_DECRYPT_BYTEA1 creates an instance of the public.pgp_sym_decrypt_bytea function.
func PUBLIC__PGP_SYM_DECRYPT_BYTEA1(
	_arg1 []byte,
	_arg2 string,
	_arg3 string,
) FUNCTION_PUBLIC__PGP_SYM_DECRYPT_BYTEA1 {
	return PUBLIC__PGP_SYM_DECRYPT_BYTEA1_(_arg1, _arg2, _arg3)
}

// PUBLIC__PGP_SYM_DECRYPT_BYTEA1_ creates an instance of the public.pgp_sym_decrypt_bytea function.
func PUBLIC__PGP_SYM_DECRYPT_BYTEA1_(
	_arg1 interface{},
	_arg2 interface{},
	_arg3 interface{},
) FUNCTION_PUBLIC__PGP_SYM_DECRYPT_BYTEA1 {
	f := FUNCTION_PUBLIC__PGP_SYM_DECRYPT_BYTEA1{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "pgp_sym_decrypt_bytea",
		Arguments: []interface{}{_arg1, _arg2, _arg3},
	}}
	f.RESULT = sq.NewBinaryField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PUBLIC__PGP_SYM_DECRYPT_BYTEA1) As(alias string) FUNCTION_PUBLIC__PGP_SYM_DECRYPT_BYTEA1 {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_PUBLIC__PGP_SYM_DECRYPT_BYTEA2 references the public.pgp_sym_decrypt_bytea function.
type FUNCTION_PUBLIC__PGP_SYM_DECRYPT_BYTEA2 struct {
	*sq.FunctionInfo
	RESULT sq.BinaryField
}

// PUBLIC__PGP_SYM_DECRYPT_BYTEA2 creates an instance of the public.pgp_sym_decrypt_bytea function.
func PUBLIC__PGP_SYM_DECRYPT_BYTEA2(
	_arg1 []byte,
	_arg2 string,
) FUNCTION_PUBLIC__PGP_SYM_DECRYPT_BYTEA2 {
	return PUBLIC__PGP_SYM_DECRYPT_BYTEA2_(_arg1, _arg2)
}

// PUBLIC__PGP_SYM_DECRYPT_BYTEA2_ creates an instance of the public.pgp_sym_decrypt_bytea function.
func PUBLIC__PGP_SYM_DECRYPT_BYTEA2_(
	_arg1 interface{},
	_arg2 interface{},
) FUNCTION_PUBLIC__PGP_SYM_DECRYPT_BYTEA2 {
	f := FUNCTION_PUBLIC__PGP_SYM_DECRYPT_BYTEA2{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "pgp_sym_decrypt_bytea",
		Arguments: []interface{}{_arg1, _arg2},
	}}
	f.RESULT = sq.NewBinaryField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PUBLIC__PGP_SYM_DECRYPT_BYTEA2) As(alias string) FUNCTION_PUBLIC__PGP_SYM_DECRYPT_BYTEA2 {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_PUBLIC__PGP_SYM_ENCRYPT1 references the public.pgp_sym_encrypt function.
type FUNCTION_PUBLIC__PGP_SYM_ENCRYPT1 struct {
	*sq.FunctionInfo
	RESULT sq.BinaryField
}

// PUBLIC__PGP_SYM_ENCRYPT1 creates an instance of the public.pgp_sym_encrypt function.
func PUBLIC__PGP_SYM_ENCRYPT1(
	_arg1 string,
	_arg2 string,
	_arg3 string,
) FUNCTION_PUBLIC__PGP_SYM_ENCRYPT1 {
	return PUBLIC__PGP_SYM_ENCRYPT1_(_arg1, _arg2, _arg3)
}

// PUBLIC__PGP_SYM_ENCRYPT1_ creates an instance of the public.pgp_sym_encrypt function.
func PUBLIC__PGP_SYM_ENCRYPT1_(
	_arg1 interface{},
	_arg2 interface{},
	_arg3 interface{},
) FUNCTION_PUBLIC__PGP_SYM_ENCRYPT1 {
	f := FUNCTION_PUBLIC__PGP_SYM_ENCRYPT1{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "pgp_sym_encrypt",
		Arguments: []interface{}{_arg1, _arg2, _arg3},
	}}
	f.RESULT = sq.NewBinaryField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PUBLIC__PGP_SYM_ENCRYPT1) As(alias string) FUNCTION_PUBLIC__PGP_SYM_ENCRYPT1 {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_PUBLIC__PGP_SYM_ENCRYPT2 references the public.pgp_sym_encrypt function.
type FUNCTION_PUBLIC__PGP_SYM_ENCRYPT2 struct {
	*sq.FunctionInfo
	RESULT sq.BinaryField
}

// PUBLIC__PGP_SYM_ENCRYPT2 creates an instance of the public.pgp_sym_encrypt function.
func PUBLIC__PGP_SYM_ENCRYPT2(
	_arg1 string,
	_arg2 string,
) FUNCTION_PUBLIC__PGP_SYM_ENCRYPT2 {
	return PUBLIC__PGP_SYM_ENCRYPT2_(_arg1, _arg2)
}

// PUBLIC__PGP_SYM_ENCRYPT2_ creates an instance of the public.pgp_sym_encrypt function.
func PUBLIC__PGP_SYM_ENCRYPT2_(
	_arg1 interface{},
	_arg2 interface{},
) FUNCTION_PUBLIC__PGP_SYM_ENCRYPT2 {
	f := FUNCTION_PUBLIC__PGP_SYM_ENCRYPT2{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "pgp_sym_encrypt",
		Arguments: []interface{}{_arg1, _arg2},
	}}
	f.RESULT = sq.NewBinaryField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PUBLIC__PGP_SYM_ENCRYPT2) As(alias string) FUNCTION_PUBLIC__PGP_SYM_ENCRYPT2 {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_PUBLIC__PGP_SYM_ENCRYPT_BYTEA1 references the public.pgp_sym_encrypt_bytea function.
type FUNCTION_PUBLIC__PGP_SYM_ENCRYPT_BYTEA1 struct {
	*sq.FunctionInfo
	RESULT sq.BinaryField
}

// PUBLIC__PGP_SYM_ENCRYPT_BYTEA1 creates an instance of the public.pgp_sym_encrypt_bytea function.
func PUBLIC__PGP_SYM_ENCRYPT_BYTEA1(
	_arg1 []byte,
	_arg2 string,
	_arg3 string,
) FUNCTION_PUBLIC__PGP_SYM_ENCRYPT_BYTEA1 {
	return PUBLIC__PGP_SYM_ENCRYPT_BYTEA1_(_arg1, _arg2, _arg3)
}

// PUBLIC__PGP_SYM_ENCRYPT_BYTEA1_ creates an instance of the public.pgp_sym_encrypt_bytea function.
func PUBLIC__PGP_SYM_ENCRYPT_BYTEA1_(
	_arg1 interface{},
	_arg2 interface{},
	_arg3 interface{},
) FUNCTION_PUBLIC__PGP_SYM_ENCRYPT_BYTEA1 {
	f := FUNCTION_PUBLIC__PGP_SYM_ENCRYPT_BYTEA1{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "pgp_sym_encrypt_bytea",
		Arguments: []interface{}{_arg1, _arg2, _arg3},
	}}
	f.RESULT = sq.NewBinaryField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PUBLIC__PGP_SYM_ENCRYPT_BYTEA1) As(alias string) FUNCTION_PUBLIC__PGP_SYM_ENCRYPT_BYTEA1 {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_PUBLIC__PGP_SYM_ENCRYPT_BYTEA2 references the public.pgp_sym_encrypt_bytea function.
type FUNCTION_PUBLIC__PGP_SYM_ENCRYPT_BYTEA2 struct {
	*sq.FunctionInfo
	RESULT sq.BinaryField
}

// PUBLIC__PGP_SYM_ENCRYPT_BYTEA2 creates an instance of the public.pgp_sym_encrypt_bytea function.
func PUBLIC__PGP_SYM_ENCRYPT_BYTEA2(
	_arg1 []byte,
	_arg2 string,
) FUNCTION_PUBLIC__PGP_SYM_ENCRYPT_BYTEA2 {
	return PUBLIC__PGP_SYM_ENCRYPT_BYTEA2_(_arg1, _arg2)
}

// PUBLIC__PGP_SYM_ENCRYPT_BYTEA2_ creates an instance of the public.pgp_sym_encrypt_bytea function.
func PUBLIC__PGP_SYM_ENCRYPT_BYTEA2_(
	_arg1 interface{},
	_arg2 interface{},
) FUNCTION_PUBLIC__PGP_SYM_ENCRYPT_BYTEA2 {
	f := FUNCTION_PUBLIC__PGP_SYM_ENCRYPT_BYTEA2{FunctionInfo: &sq.FunctionInfo{
		Schema:    "public",
		Name:      "pgp_sym_encrypt_bytea",
		Arguments: []interface{}{_arg1, _arg2},
	}}
	f.RESULT = sq.NewBinaryField("Result", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_PUBLIC__PGP_SYM_ENCRYPT_BYTEA2) As(alias string) FUNCTION_PUBLIC__PGP_SYM_ENCRYPT_BYTEA2 {
	f.FunctionInfo.Alias = alias
	return f
}
`
