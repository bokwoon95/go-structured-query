package mysql

import (
	"text/template"

	"github.com/bokwoon95/go-structured-query/sqgen"
)

type TablesTemplateData struct {
	PackageName string
	Imports []string
	Tables []Table
}

func getTablesTemplate() (*template.Template, error) {
	return template.New("").Funcs(sqgen.FuncMap).Parse(tablesTemplate)
}

// export and quoteSpace functions come from the funcMap
var tablesTemplate = `// Code generated by 'sqgen-mysql tables'; DO NOT EDIT.
package {{$.PackageName}}

import (
	{{- range $_, $import := $.Imports}}
	{{$import}}
	{{- end}}
)
{{- range $_, $table := $.Tables}}
{{template "table_struct_definition" $table}}
{{template "table_constructor" $table}}
{{template "table_as" $table}}
{{- end}}

{{- define "table_struct_definition"}}
{{- with $table := .}}
{{- if eq $table.RawType "BASE TABLE"}}
// {{export table.StructName}} references the {{$table.Schema}}.{{quoteSpace $table.Name}} table.
{{- else if eq $table.RawType "VIEW"}}
// {{export table.StructName}} references the {{$table.Schema}}.{{quoteSpace $table.Name}} view.
{{- end}}
type {{export table.StructName}} struct {
	*sq.TableInfo
	{{- range $_, $field := $table.Fields}}
	{{export field.Name}} {{$field.Type}}
	{{- end}}
}
{{- end}}
{{- end}}

{{- define "table_constructor"}}
{{- with $table := .}}
{{- if eq $table.RawType "BASE TABLE"}}
// {{export table.Constructor}} creates an instance of the {{$table.Schema}}.{{$table.Name.QuoteSpace}} table.
{{- else if eq $table.RawType "VIEW"}}
// {{export table.Constructor}} creates an instance of the {{$table.Schema}}.{{$table.Name.QuoteSpace}} view.
{{- end}}
func {{export table.Constructor}}() {{export table.StructName}} {
	tbl := {{export table.StructName}}{TableInfo: &sq.TableInfo{
		Schema: "{{$table.Schema}}",
		Name: "{{$table.Name}}",
	},}
	{{- range $_, $field := $table.Fields}}
	tbl.{{export field.Name}} = {{$field.Constructor}}("{{$field.Name}}", tbl.TableInfo)
	{{- end}}
	return tbl
}
{{- end}}
{{- end}}

{{- define "table_as"}}
{{- with $table := .}}
{{- if eq $table.RawType "BASE TABLE"}}
// As modifies the alias of the underlying table.
{{- else if eq $table.RawType "VIEW"}}
// As modifies the alias of the underlying view.
{{- end}}
func (tbl {{export table.StructName}}) As(alias string) {{export table.StructName}} {
	tbl.TableInfo.Alias = alias
	return tbl
}
{{- end}}
{{- end}}`

